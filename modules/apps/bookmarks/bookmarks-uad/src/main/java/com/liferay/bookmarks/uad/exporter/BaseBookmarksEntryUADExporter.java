/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.bookmarks.uad.exporter;

import com.liferay.bookmarks.model.BookmarksEntry;
import com.liferay.bookmarks.service.BookmarksEntryLocalService;
import com.liferay.bookmarks.uad.constants.BookmarksEntryUADConstants;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.user.associated.data.exporter.DynamicQueryUADExporter;

import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the bookmarks entry UAD exporter.
 *
 * <p>
 * This implementation exists only as a container for the default methods
 * generated by ServiceBuilder. All custom methods should be put in {@link
 * BookmarksEntryUADExporter}.
 * </p>
 *
 * @author Pei-Jung Lan
 */
public abstract class BaseBookmarksEntryUADExporter
	extends DynamicQueryUADExporter<BookmarksEntry> {

	@Override
	public Class<BookmarksEntry> getTypeClass() {
		return BookmarksEntry.class;
	}

	@Override
	protected ActionableDynamicQuery doGetActionableDynamicQuery() {
		return bookmarksEntryLocalService.getActionableDynamicQuery();
	}

	@Override
	protected String[] doGetUserIdFieldNames() {
		return BookmarksEntryUADConstants.USER_ID_FIELD_NAMES_BOOKMARKS_ENTRY;
	}

	@Override
	protected String toXmlString(BookmarksEntry bookmarksEntry) {
		return StringBundler.concat(
			"<model><model-name>com.liferay.bookmarks.model.BookmarksEntry",
			"</model-name><column><column-name>entryId</column-name>",
			"<column-value><![CDATA[", bookmarksEntry.getEntryId(),
			"]]></column-value></column><column><column-name>userId",
			"</column-name><column-value><![CDATA[", bookmarksEntry.getUserId(),
			"]]></column-value></column>",
			"<column><column-name>userName</column-name>",
			"<column-value><![CDATA[", bookmarksEntry.getUserName(),
			"]]></column-value></column>",
			"<column><column-name>statusByUserId</column-name>",
			"<column-value><![CDATA[", bookmarksEntry.getStatusByUserId(),
			"]]></column-value></column>",
			"<column><column-name>statusByUserName</column-name>",
			"<column-value><![CDATA[", bookmarksEntry.getStatusByUserName(),
			"]]></column-value></column>",
			"<column><column-name>name</column-name>",
			"<column-value><![CDATA[", bookmarksEntry.getName(),
			"]]></column-value></column>",
			"<column><column-name>url</column-name><column-value><![CDATA[",
			bookmarksEntry.getUrl(), "]]></column-value></column>",
			"<column><column-name>description</column-name>",
			"<column-value><![CDATA[", bookmarksEntry.getDescription(),
			"]]></column-value></column></model>");
	}

	@Reference
	protected BookmarksEntryLocalService bookmarksEntryLocalService;

}