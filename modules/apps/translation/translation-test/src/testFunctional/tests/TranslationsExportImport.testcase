@component-name = "portal-collaboration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Translations Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "This ensures that a translated zip file with all available language can be exported."
	@priority = "5"
	@refactordone
	test CanExportWCWithAllLanguages {
		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Guest",
			title = "Web Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(webContentTitle = "Web Content Title");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Arabic (Saudi Arabia),Catalan (Spain),Chinese (China),Dutch (Netherlands),Finnish (Finland),French (France),German (Germany),Hungarian (Hungary),Japanese (Japan),Portuguese (Brazil),Spanish (Spain),Swedish (Sweden)");

		Translations.assertFileNameFromTempFolder(webContentTitle = "Web Content Title");
	}

	@description = "This ensures that a translated zip file with an available language can be exported."
	@priority = "5"
	@refactordone
	test CanExportWebContent {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Guest",
			title = "Web Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(webContentTitle = "Web Content Title");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.assertFileNameFromTempFolder(webContentTitle = "Web Content Title");
	}

	@description = "This ensures that user can import the exported xliff file with 1.2 version."
	@priority = "5"
	@refactordone
	test CanImportExportedXLIFF {
		JSONWebcontent.addWebContent(
			content = "WebContent",
			description = "Description",
			groupName = "Guest",
			title = "WebContentTitle");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(webContentTitle = "WebContentTitle");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			exportFileFormat = "XLIFF 1.2",
			languageList = "Spanish (Spain)");

		Translations.translateFile(
			contentTranslation = "Contenidoweb",
			descriptionTranslation = "Descripcion",
			encoding = "false",
			operation = "unzip",
			titleTranslation = "Titulodelcontenidoweb",
			translationFileName = "WebContentTitle-en_US-es_ES",
			translationZipFileName = "WebContentTitle-en_US",
			webContentContent = "WebContent",
			webContentDescription = "Description",
			webContentTitle = "WebContentTitle");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			fileName = "WebContentTitle-en_US-es_ES.xlf",
			filePath = "/WebContentTitle-en_US",
			webContentTitle = "WebContentTitle");

		WebContentNavigator.gotoEditCP(webContentTitle = "WebContentTitle");

		PortletEntry.changeLocale(locale = "es-ES");

		WebContent.viewCP(
			webContentContent = "Contenidoweb",
			webContentDescription = "Descripcion",
			webContentTitle = "Titulodelcontenidoweb");
	}

	@description = "This ensures that the translation files can be imported from a zip."
	@priority = "5"
	@refactordone
	test CanImportWCWithZipFile {
		JSONWebcontent.addWebContent(
			content = "WebContent",
			description = "Description",
			groupName = "Guest",
			title = "WebContentTitle");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(webContentTitle = "WebContentTitle");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "German (Germany),Spanish (Spain)");

		Translations.translateFile(
			contentTranslation = "Contenidoweb",
			descriptionTranslation = "Descripcion",
			encoding = "false",
			operation = "unzip",
			titleTranslation = "Titulodelcontenidoweb",
			translationFileName = "WebContentTitle-en_US-es_ES",
			translationZipFileName = "WebContentTitle-en_US",
			webContentContent = "WebContent",
			webContentDescription = "Description",
			webContentTitle = "WebContentTitle");

		Translations.translateFile(
			contentTranslation = "Internetinhalt",
			descriptionTranslation = "Beschreibung",
			encoding = "false",
			operation = "zip",
			titleTranslation = "TiteldesWebinhalts",
			translationFileName = "WebContentTitle-en_US-de_DE",
			translationZipFileName = "WebContentTitle-en_US",
			webContentContent = "WebContent",
			webContentDescription = "Description",
			webContentTitle = "WebContentTitle");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			fileName = "WebContentTitle-en_US_translated.zip",
			filePath = "",
			webContentTitle = "WebContentTitle");

		WebContentNavigator.gotoEditCP(webContentTitle = "WebContentTitle");

		PortletEntry.changeLocale(locale = "es-ES");

		WebContent.viewCP(
			webContentContent = "Contenidoweb",
			webContentDescription = "Descripcion",
			webContentTitle = "Titulodelcontenidoweb");

		PortletEntry.changeLocale(locale = "de-DE");

		WebContent.viewCP(
			webContentContent = "Internetinhalt",
			webContentDescription = "Beschreibung",
			webContentTitle = "TiteldesWebinhalts");
	}

	@description = "This ensures that a translated file(.xlf) with an available language can be imported."
	@priority = "5"
	@refactordone
	test CanImportWebContent {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WebContent",
			description = "Description",
			groupName = "Guest",
			title = "WebContentTitle");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(webContentTitle = "WebContentTitle");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.translateFile(
			contentTranslation = "Contenidoweb",
			descriptionTranslation = "Descripcion",
			encoding = "false",
			operation = "unzip",
			titleTranslation = "Titulodelcontenidoweb",
			translationFileName = "WebContentTitle-en_US-es_ES",
			translationZipFileName = "WebContentTitle-en_US",
			webContentContent = "WebContent",
			webContentDescription = "Description",
			webContentTitle = "WebContentTitle");

		Translations.importTranslation(
			fileName = "WebContentTitle-en_US-es_ES.xlf",
			filePath = "/WebContentTitle-en_US",
			webContentTitle = "WebContentTitle");

		WebContentNavigator.gotoEditCP(webContentTitle = "WebContentTitle");

		PortletEntry.changeLocale(locale = "es-ES");

		WebContent.viewCP(
			webContentContent = "Contenidoweb",
			webContentDescription = "Descripcion",
			webContentTitle = "Titulodelcontenidoweb");
	}

	@description = "This ensures that a translated file(.xlf) after re-encoding it to UTF-8 can be imported."
	@priority = "4"
	@refactordone
	test CanImportWebContentWithUTF8 {
		JSONWebcontent.addWebContent(
			content = "WebContent",
			description = "Description",
			groupName = "Guest",
			title = "WebContentTitle");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(webContentTitle = "WebContentTitle");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Japanese (Japan)");

		Translations.translateFile(
			contentTranslation = "Webコンテンツ",
			descriptionTranslation = "説明",
			encoding = "utf8",
			operation = "unzip",
			titleTranslation = "Webコンテンツのタイトル",
			translationFileName = "WebContentTitle-en_US-ja_JP",
			translationZipFileName = "WebContentTitle-en_US",
			webContentContent = "WebContent",
			webContentDescription = "Description",
			webContentTitle = "WebContentTitle");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			fileName = "WebContentTitle-en_US-ja_JP_utf8.xlf",
			filePath = "/WebContentTitle-en_US",
			webContentTitle = "WebContentTitle");

		WebContentNavigator.gotoEditCP(webContentTitle = "WebContentTitle");

		PortletEntry.changeLocale(locale = "ja-JP");

		WebContent.viewCP(
			webContentContent = "Webコンテンツ",
			webContentDescription = "説明",
			webContentTitle = "Webコンテンツのタイトル");
	}

	@description = "This ensures that a translated file(.xliff) with an available language can be imported."
	@priority = "5"
	@refactordone
	test CanImportWebContentWithXliffFile {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WebContent",
			description = "Description",
			groupName = "Guest",
			title = "WebContentTitle");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(webContentTitle = "WebContentTitle");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "German (Germany)");

		Translations.translateFile(
			contentTranslation = "Internetinhalt",
			descriptionTranslation = "Beschreibung",
			encoding = "false",
			operation = "unzip",
			titleTranslation = "TiteldesWebinhalts",
			translationFileName = "WebContentTitle-en_US-de_DE",
			translationFileRename = "true",
			translationZipFileName = "WebContentTitle-en_US",
			webContentContent = "WebContent",
			webContentDescription = "Description",
			webContentTitle = "WebContentTitle");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			fileName = "WebContentTitle-en_US-de_DE.xliff",
			filePath = "/WebContentTitle-en_US",
			webContentTitle = "WebContentTitle");

		WebContentNavigator.gotoEditCP(webContentTitle = "WebContentTitle");

		PortletEntry.changeLocale(locale = "de-DE");

		WebContent.viewCP(
			webContentContent = "Internetinhalt",
			webContentDescription = "Beschreibung",
			webContentTitle = "TiteldesWebinhalts");
	}

}