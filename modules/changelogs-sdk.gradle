import org.gradle.util.VersionNumber

buildscript {
	apply from: file("build-buildscript.gradle"), to: buildscript

	repositories {
		maven {
			url "https://repository-cdn.liferay.com/nexus/content/groups/public"
		}
	}
}

File changelogPropertiesFile = file("sdk/" + projectName + "/CHANGELOG.properties")

task buildChangelogs
task recordCommits

buildChangelogs {
	description = "Builds the changelogs for each published version in `CHANGELOG.markdown`."
	group = "changelogs"

	doLast {
		assert project.properties["projectName"] : "Please provide a value for the '-PprojectName' property"

		String gitLog = "git --no-pager log --follow -p --pretty=format:%H:%cd:%s 6a1ce18c602e..ed274081137c5 -- sdk/gradle-plugins/build.gradle".execute().text

		String commitId = ""
		String ticket = ""
		String bndVersion = "4.4.101"

		gitLog.eachLine {
			String line ->

			def matcher = line =~ /([a-f0-9]+):.+:([A-Z]+-\d+).*/

			String pluginName = ""
			String version = ""

			if (matcher.find()) {

				commitId = matcher.group(1)
				ticket = matcher.group(2)

			}

			matcher = line =~ /\+\s*compile group: .*, name: \"(.+)", version: \"(\d+\.\d+\.\d+)\"/

			if (matcher.find()) {
				pluginName = matcher.group(1)

				version = matcher.group(2)

				def changelog = StringBuilder.newInstance()
				changelog << """\
## ${bndVersion} - 1970-01-01

### Changed
- [${ticket}]: Update the [${pluginName}] dependency to version ${version}.
"""
				println changelog
			}

		}

		logger.lifecycle "Updated CHANGELOG.markdown for '{}'", projectName
	}
}

recordCommits {
	description = "Records the commit ID for each published version in `CHANGELOG.properties`."
	group = "changelogs"

	doLast {
		assert project.properties["projectName"] : "Please provide a value for the '-PprojectName' property"

		ByteArrayOutputStream standardOutputByteArrayOutputStream = new ByteArrayOutputStream()

		exec {
			commandLine "git", "--no-pager", "log", "--follow", "--format=fuller", "-p", "--", "modules/sdk/" + projectName + "/"
			standardOutput = standardOutputByteArrayOutputStream
			workingDir = projectDir.parentFile
		}

		String gitLogOutput = standardOutputByteArrayOutputStream.toString()

		List<String> commits = gitLogOutput.split("\ncommit ")

		VersionNumber lastVersionNumber = null
		Map<VersionNumber, String> recordCommitIDs = [:]

		for (int i = 0; i < (commits.size() - 1); i++) {
			String commit = commits.get(i)
			String previousCommit = commits.get(i + 1)

			String diff = commit.split("\n", 2)[1]

			int x = diff.indexOf("/" + projectName + "/bnd.bnd");

			int y = diff.indexOf("-Bundle-Version: ", x)

			if ((x != -1) && (y != -1)) {
				String publishedVersion = diff.substring(y + 17, diff.indexOf("\n", y))

				VersionNumber publishedVersionNumber = VersionNumber.parse(publishedVersion)

				if (!recordCommitIDs.containsKey(publishedVersionNumber) && (publishedVersionNumber.major > 0) && ((lastVersionNumber == null) || (publishedVersionNumber.compareTo(lastVersionNumber) < 0))) {
					recordCommitIDs.put(publishedVersionNumber, previousCommit.split("\n", 2)[0])

					lastVersionNumber = publishedVersionNumber
				}
			}
		}

		changelogPropertiesFile.text = recordCommitIDs.collect {
			VersionNumber versionNumber, String commitId ->

			"git-id[${versionNumber}]=${commitId}"
		} join "\n"

		logger.lifecycle "Updated '{}'", changelogPropertiesFile
	}
}