import org.gradle.util.VersionNumber

buildscript {
	apply from: file("build-buildscript.gradle"), to: buildscript

	repositories {
		maven {
			url "https://repository-cdn.liferay.com/nexus/content/groups/public"
		}
	}
}

task buildChangelogs
task recordCommitIDs

buildChangelogs {
	description = "Builds the changelogs for each published version in `CHANGELOG.markdown`."
	group = "changelogs"

	doLast {
		assert project.properties["projectName"] : "Please provide a value for the '-PprojectName' property"

		File changelogPropertiesFile = file("sdk/" + projectName + "/CHANGELOG.properties")

		logger.lifecycle "Updated CHANGELOG.markdown for '{}'", projectName
	}
}

recordCommitIDs {
	description = "Records the commit ID for each published version in `CHANGELOG.properties`."
	group = "changelogs"

	doLast {
		assert project.properties["projectName"] : "Please provide a value for the '-PprojectName' property"

		Map<VersionNumber, String> commitIDsMap = _getCommitIDsMap(projectName)

		String content = ""

		commitIDsMap.each {
			k, v -> content += "git-id[${k}]=${v}\n"
		}

		File changelogPropertiesFile = file("sdk/" + projectName + "/CHANGELOG.properties")

		changelogPropertiesFile.write(content.trim())

		logger.lifecycle "Updated `CHANGELOG.properties` for '{}'", projectName
	}
}

private Map<VersionNumber, String> _getCommitIDsMap(String projectName) {
	ByteArrayOutputStream standardOutputByteArrayOutputStream = new ByteArrayOutputStream()

	exec {
		commandLine "git", "--no-pager", "log", "--follow", "--format=fuller", "-p", "--", "modules/sdk/" + projectName + "/"
		standardOutput = standardOutputByteArrayOutputStream
		workingDir = projectDir.parentFile
	}

	String gitLogOutput = standardOutputByteArrayOutputStream.toString()

	String lastPrepNextCommitId = null
	VersionNumber lastVersionNumber = null
	Map<VersionNumber, String> recordCommitIDs = [:]

	int previousCommitPos = -1
	int commitPos = -1

	while (true) {
		commitPos = gitLogOutput.indexOf("\ncommit ", commitPos + 1)

		if (commitPos == -1) {
			break;
		}

		if (previousCommitPos == -1) {
			previousCommitPos = commitPos

			continue
		}

		String commitDiff = gitLogOutput.substring(previousCommitPos, commitPos)

		previousCommitPos = commitPos

		int x = gitLogOutput.indexOf("\n", commitPos + 1)

		String previousCommitId = gitLogOutput.substring(commitPos + 7, x)

		if (commitDiff.contains("prep next")) {
			if (!lastPrepNextCommitId) {
				lastPrepNextCommitId = previousCommitId
			}
		}
		else {
			lastPrepNextCommitId = null
		}

		x = commitDiff.indexOf("/" + projectName + "/bnd.bnd");

		if (x == -1) {
			continue
		}

		int y = commitDiff.indexOf("-Bundle-Version: ", x)

		if (y == -1) {
			continue;
		}

		int z = commitDiff.indexOf("\n", y);

		String publishedVersion = commitDiff.substring(y + 17, z)

		y = commitDiff.indexOf("+Bundle-Version: ", x)

		if (y == -1) {
			continue;
		}

		VersionNumber publishedVersionNumber = VersionNumber.parse(publishedVersion)

		if (!recordCommitIDs.containsKey(publishedVersionNumber) && (publishedVersionNumber.major > 0) && ((lastVersionNumber == null) || (publishedVersionNumber.compareTo(lastVersionNumber) < 0))) {
			if (lastPrepNextCommitId) {
				recordCommitIDs.put(publishedVersionNumber, lastPrepNextCommitId)
			}
			else {
				recordCommitIDs.put(publishedVersionNumber, previousCommitId)
			}

			lastPrepNextCommitId = null
			lastVersionNumber = publishedVersionNumber
		}
	}

	return recordCommitIDs
}