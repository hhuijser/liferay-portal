import org.gradle.util.GUtil
import org.gradle.util.VersionNumber

buildscript {
	apply from: file("build-buildscript.gradle"), to: buildscript

	repositories {
		maven {
			url "https://repository-cdn.liferay.com/nexus/content/groups/public"
		}
	}
}

File changelogFile = file("sdk/" + projectName + "/CHANGELOG.markdown")
File changelogPropertiesFile = file("sdk/" + projectName + "/CHANGELOG.properties")

task buildChangelogs
task recordCommits

buildChangelogs {
	dependsOn recordCommits

	description = "Builds the changelogs for each published version in `CHANGELOG.markdown`."
	group = "changelogs"

	doLast {
		assert project.properties["projectName"] : "Please provide a value for the '-PprojectName' property"

		String[] changelogPropertiesFileContent = changelogPropertiesFile
		changelogPropertiesFileContent = changelogPropertiesFileContent.reverse()

		String changelog = ""

		String version = ""
		String rangeStart = ""
		String rangeEnd = ""

		for (int i = 0; i < changelogPropertiesFileContent.size() - 1;) {
			String line1 = changelogPropertiesFileContent[i++]
			String line2 = changelogPropertiesFileContent[i]

			def matcher = line1 =~ /git-id\[(\d+\.\d+\.\d+)\]=([a-f0-9]+)/

			if (matcher.find()) {
				version = matcher.group(1)
				rangeStart = matcher.group(2)
			}

			matcher = line2 =~ /git-id\[(\d+\.\d+\.\d+)\]=([a-f0-9]+)/

			if (matcher.find()) {
				rangeEnd = matcher.group(2)
			}

			ByteArrayOutputStream standardOutputByteArrayOutputStream = new ByteArrayOutputStream()

			exec {
				commandLine "git", "--no-pager", "log", "--follow", "--pretty=format:%H:%cd:%s", "-p", "${rangeStart}..${rangeEnd}", "--", "modules/sdk/${projectName}/build.gradle"
				standardOutput = standardOutputByteArrayOutputStream
				workingDir = projectDir.parentFile
			}

			String gitLogOutput = standardOutputByteArrayOutputStream.toString()

			if (gitLogOutput.length() == 0) {
				continue
			}

			String ticket = ""

			gitLogOutput.eachLine {
				String gitLogLine ->

				matcher = gitLogLine =~ /[a-f0-9]+:.+:([A-Z]+-\d+).*/

				if (matcher.find()) {
					ticket = matcher.group(1)
				}

				matcher = gitLogLine =~ /\+\s*compile group: .*, name: \"(.+)", version: \"(\d+\.\d+\.\d+)\"/

				if (matcher.find()) {
					String dependencyName = matcher.group(1)
					String dependencyVersion = matcher.group(2)

					changelog = """\
						|
						|### Changed
						|- [${ticket}]: Update the [${dependencyName}] dependency to version ${dependencyVersion}.""".stripMargin() + changelog
				}
			}

			changelog = "\n\n## ${version} - 1970-01-01\n" + changelog
		}

		def getBundleNameSymbolicName = {
			dir ->

			def properties = GUtil.loadProperties(new File(dir + "/bnd.bnd"))

			[properties["Bundle-Name"], properties["Bundle-SymbolicName"]]
		}

		def (pluginFullName, pluginSymbolicName) = getBundleNameSymbolicName("sdk/${projectName}")

		changelog = "# ${pluginFullName} Change Log" + changelog

		changelogFile.text = changelog
		logger.lifecycle changelog

		logger.lifecycle "Updated CHANGELOG.markdown for '{}'", projectName
	}
}

recordCommits {
	description = "Records the commit ID for each published version in `CHANGELOG.properties`."
	group = "changelogs"

	doLast {
		assert project.properties["projectName"] : "Please provide a value for the '-PprojectName' property"

		ByteArrayOutputStream standardOutputByteArrayOutputStream = new ByteArrayOutputStream()

		exec {
			commandLine "git", "--no-pager", "log", "--follow", "--format=fuller", "-p", "--", "modules/sdk/" + projectName + "/"
			standardOutput = standardOutputByteArrayOutputStream
			workingDir = projectDir.parentFile
		}

		String gitLogOutput = standardOutputByteArrayOutputStream.toString()

		List<String> commits = gitLogOutput.split("\ncommit ")

		VersionNumber lastVersionNumber = null
		Map<VersionNumber, String> recordCommitIDs = [:]

		for (int i = 0; i < (commits.size() - 1); i++) {
			String commit = commits.get(i)
			String previousCommit = commits.get(i + 1)

			String diff = commit.split("\n", 2)[1]

			int x = diff.indexOf("/" + projectName + "/bnd.bnd");

			int y = diff.indexOf("-Bundle-Version: ", x)

			if ((x != -1) && (y != -1)) {
				String publishedVersion = diff.substring(y + 17, diff.indexOf("\n", y))

				VersionNumber publishedVersionNumber = VersionNumber.parse(publishedVersion)

				if (!recordCommitIDs.containsKey(publishedVersionNumber) && (publishedVersionNumber.major > 0) && ((lastVersionNumber == null) || (publishedVersionNumber.compareTo(lastVersionNumber) < 0))) {
					recordCommitIDs.put(publishedVersionNumber, previousCommit.split("\n", 2)[0])

					lastVersionNumber = publishedVersionNumber
				}
			}
		}

		changelogPropertiesFile.text = recordCommitIDs.collect {
			VersionNumber versionNumber, String commitId ->

			"git-id[${versionNumber}]=${commitId}"
		} join "\n"

		logger.lifecycle "Updated '{}'", changelogPropertiesFile
	}
}