import org.gradle.util.VersionNumber

buildscript {
	apply from: file("build-buildscript.gradle"), to: buildscript

	repositories {
		maven {
			url "https://repository-cdn.liferay.com/nexus/content/groups/public"
		}
	}
}

task buildChangelogs
task recordCommitIDs

buildChangelogs {
	description = "Builds the changelogs for each published version in `CHANGELOG.markdown`."
	group = "changelogs"

	doLast {
		assert project.properties["projectName"] : "Please provide a value for the '-PprojectName' property"

		File changelogPropertiesFile = file("sdk/" + projectName + "/CHANGELOG.properties")

		logger.lifecycle "Updated CHANGELOG.markdown for '{}'", projectName
	}
}

recordCommitIDs {
	description = "Records the commit ID for each published version in `CHANGELOG.properties`."
	group = "changelogs"

	doLast {
		assert project.properties["projectName"] : "Please provide a value for the '-PprojectName' property"

		Map<VersionNumber, String> commitIDsMap = _getCommitIDsMap(projectName)

		String content = ""

		commitIDsMap.each {
			k, v -> content += "git-id[${k}]=${v}\n"
		}

		File changelogPropertiesFile = file("sdk/" + projectName + "/CHANGELOG.properties")

		changelogPropertiesFile.write(content.trim())

		logger.lifecycle "Updated `CHANGELOG.properties` for '{}'", projectName
	}
}

private Map<VersionNumber, String> _getCommitIDsMap(String projectName) {
	ByteArrayOutputStream standardOutputByteArrayOutputStream = new ByteArrayOutputStream()

	exec {
		commandLine "git", "--no-pager", "log", "--follow", "--format=fuller", "-p", "--", "modules/sdk/" + projectName + "/"
		standardOutput = standardOutputByteArrayOutputStream
		workingDir = projectDir.parentFile
	}

	String gitLogOutput = standardOutputByteArrayOutputStream.toString()

	List<String> commits = gitLogOutput.split("\ncommit ")

	VersionNumber lastVersionNumber = null
	Map<VersionNumber, String> recordCommitIDs = [:]

	for (int i = 0; i < (commits.size() - 1); i++) {
		String commit = commits.get(i)
		String previousCommit = commits.get(i + 1)

		String diff = commit.split("\n", 2)[1]

		int x = diff.indexOf("/" + projectName + "/bnd.bnd");

		int y = diff.indexOf("-Bundle-Version: ", x)

		if ((x != -1) && (y != -1)) {
			String publishedVersion = diff.substring(y + 17, diff.indexOf("\n", y))

			VersionNumber publishedVersionNumber = VersionNumber.parse(publishedVersion)

			if (!recordCommitIDs.containsKey(publishedVersionNumber) && (publishedVersionNumber.major > 0) && ((lastVersionNumber == null) || (publishedVersionNumber.compareTo(lastVersionNumber) < 0))) {
				recordCommitIDs.put(publishedVersionNumber, previousCommit.split("\n", 2)[0])

				lastVersionNumber = publishedVersionNumber
			}
		}
	}

	return recordCommitIDs
}