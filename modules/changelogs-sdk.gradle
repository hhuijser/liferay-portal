buildscript {
	apply from: file("build-buildscript.gradle"), to: buildscript

	repositories {
		maven {
			url "https://repository-cdn.liferay.com/nexus/content/groups/public"
		}
	}
}

task buildChangelogs
task recordCommitIDs

buildChangelogs {
	description = "Builds the changelogs for each published version in `CHANGELOG.markdown`."
	group = "changelogs"

	doLast {
		assert project.properties["projectName"] : "Please provide a value for the '-PprojectName' property"

		File changelogPropertiesFile = file("sdk/" + projectName + "/CHANGELOG.properties")

		logger.lifecycle "Updated CHANGELOG.markdown for '{}'", projectName
	}
}

recordCommitIDs {
	description = "Records the commit ID for each published version in `CHANGELOG.properties`."
	group = "changelogs"

	doLast {
		assert project.properties["projectName"] : "Please provide a value for the '-PprojectName' property"

		Map<String, String> commitIDsMap = _getCommitIDsMap(projectName)

		String content = ""

		commitIDsMap.each {
			k, v -> content += "git-id[${k}]=${v}\n"
		}

		File changelogPropertiesFile = file("sdk/" + projectName + "/CHANGELOG.properties")

		changelogPropertiesFile.write(content.trim())

		logger.lifecycle "Updated `CHANGELOG.properties` for '{}'", projectName
	}
}

private Map<String, String> _getCommitIDsMap(String projectName) {
	String command = "git log --follow --format=fuller -p -- sdk/" + projectName + "/"

	Process process = command.execute()

	String output = process.text

	String lastPrepNextCommitId
	Map<String, String> map = [:]

	int previousCommitPos = -1
	int commitPos = -1

	while (true) {
		commitPos = output.indexOf("\ncommit ", commitPos + 1)

		if (commitPos == -1) {
			break;
		}

		if (previousCommitPos == -1) {
			previousCommitPos = commitPos

			continue
		}

		String commitDiff = output.substring(previousCommitPos, commitPos)

		previousCommitPos = commitPos

		int x = output.indexOf("\n", commitPos + 1)

		String commitId = output.substring(commitPos + 7, x)

		if (commitDiff.contains("prep next")) {
			if (!lastPrepNextCommitId) {
				lastPrepNextCommitId = commitId
			}
		}
		else {
			lastPrepNextCommitId = null
		}

		x = commitDiff.indexOf("/" + projectName + "/bnd.bnd");

		if (x == -1) {
			continue
		}

		int y = commitDiff.indexOf("-Bundle-Version: ", x)

		if (y == -1) {
			continue;
		}

		int z = commitDiff.indexOf("\n", y);

		String beforeVersion = commitDiff.substring(y + 17, z)

		y = commitDiff.indexOf("+Bundle-Version: ", x)

		if (y == -1) {
			continue;
		}

		z = commitDiff.indexOf("\n", y);

		String afterVersion = commitDiff.substring(y + 17, z)

		if (!_isValidVersionNumbers(beforeVersion, afterVersion)) {
			continue
		}

		if (!map.containsKey(beforeVersion)) {
			if (lastPrepNextCommitId) {
				map.put(beforeVersion, lastPrepNextCommitId)
			}
			else {
				map.put(beforeVersion, commitId)
			}

			lastPrepNextCommitId = null
		}
	}

	return map
}

private boolean _isValidVersionNumbers(String version1, String version2) {
	String[] array1 = version1.split("\\.")
	String[] array2 = version2.split("\\.")

	if ((array1.length != 3) || (array2.length != 3)) {
		return false;
	}

	if ((array1[0] == array2[0]) && (array1[1] == array2[1]) && ((Integer.parseInt(array1[2]) + 1) == Integer.parseInt(array2[2]))) {
		return true
	}

	if ((array1[0] == array2[0]) && ((Integer.parseInt(array1[1]) + 1) == Integer.parseInt(array2[1])) && (array2[2] == "0")) {
		return true
	}

	if (((Integer.parseInt(array1[0]) + 1) == Integer.parseInt(array2[0])) && (array2[1] == "0") && (array2[2] == "0")) {
		return true
	}

	return false
}