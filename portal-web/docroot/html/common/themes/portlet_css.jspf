<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
JSONObject jsonObject = PortletSetupUtil.cssToJSONObject(portletSetup, portletSetupCss);

List finalCSS = new ArrayList();

// Background data

JSONObject bgData = jsonObject.getJSONObject("bgData");

String bgColor = bgData.getString("backgroundColor");
String bgImage = bgData.getString("backgroundImage");

JSONObject bgPos = bgData.getJSONObject("backgroundPosition");
JSONObject bgPosLeft = bgPos.getJSONObject(_LEFT_KEY);
JSONObject bgPosTop = bgPos.getJSONObject(_TOP_KEY);

String bgPosLeftValue = bgPosLeft.getString(_VALUE_KEY) + bgPosLeft.getString(_UNIT_KEY);
String bgPosTopValue = bgPosTop.getString(_VALUE_KEY) + bgPosTop.getString(_UNIT_KEY);
String bgPosValue = bgPosLeftValue + " " + bgPosTopValue;

boolean useBgImage = bgData.getBoolean("useBgImage");

if (Validator.isNotNull(bgColor) && !Validator.isBlank(bgColor)) {
	finalCSS.add("background-color: " + bgColor);
}

if (Validator.isNotNull(bgImage) && !Validator.isBlank(bgImage)) {
	finalCSS.add("background-image: url(" + bgImage + ")");
}

if (useBgImage && !Validator.isBlank(bgPosValue)) {
	finalCSS.add("background-position: " + bgPosValue);
}

// Border data

JSONObject borderData = jsonObject.getJSONObject("borderData");

JSONObject borderWidth = borderData.getJSONObject("borderWidth");
JSONObject borderStyle = borderData.getJSONObject("borderStyle");
JSONObject borderColor = borderData.getJSONObject("borderColor");

boolean ufaBorderWidth = borderWidth.getBoolean(_SAME_FOR_ALL_KEY);
boolean ufaBorderStyle = borderStyle.getBoolean(_SAME_FOR_ALL_KEY);
boolean ufaBorderColor = borderColor.getBoolean(_SAME_FOR_ALL_KEY);

// Width

JSONObject borderWidthTop = borderWidth.getJSONObject(_TOP_KEY);
JSONObject borderWidthRight = borderWidth.getJSONObject(_RIGHT_KEY);
JSONObject borderWidthBottom = borderWidth.getJSONObject(_BOTTOM_KEY);
JSONObject borderWidthLeft = borderWidth.getJSONObject(_LEFT_KEY);

String borderTopWidthValue = StringPool.BLANK;
String borderRightWidthValue = StringPool.BLANK;
String borderBottomWidthValue = StringPool.BLANK;
String borderLeftWidthValue = StringPool.BLANK;

if (Validator.isNotNull(borderWidthTop.getString(_VALUE_KEY))) {
	borderTopWidthValue = borderWidthTop.getString(_VALUE_KEY) + borderWidthTop.getString(_UNIT_KEY);
}

if (Validator.isNotNull(borderWidthRight.getString(_VALUE_KEY))) {
	borderRightWidthValue = borderWidthRight.getString(_VALUE_KEY) + borderWidthRight.getString(_UNIT_KEY);
}

if (Validator.isNotNull(borderWidthBottom.getString(_VALUE_KEY))) {
	borderBottomWidthValue = borderWidthBottom.getString(_VALUE_KEY) + borderWidthBottom.getString(_UNIT_KEY);
}

if (Validator.isNotNull(borderWidthLeft.getString(_VALUE_KEY))) {
	borderLeftWidthValue = borderWidthLeft.getString(_VALUE_KEY) + borderWidthLeft.getString(_UNIT_KEY);
}

// Style

String borderTopStyleValue = borderStyle.getString(_TOP_KEY);
String borderRightStyleValue = borderStyle.getString(_RIGHT_KEY);
String borderBottomStyleValue = borderStyle.getString(_BOTTOM_KEY);
String borderLeftStyleValue = borderStyle.getString(_LEFT_KEY);

// Color

String borderTopColorValue = borderColor.getString(_TOP_KEY);
String borderRightColorValue = borderColor.getString(_RIGHT_KEY);
String borderBottomColorValue = borderColor.getString(_BOTTOM_KEY);
String borderLeftColorValue = borderColor.getString(_LEFT_KEY);

if (ufaBorderWidth && !_unitSet.contains(borderTopWidthValue) && !Validator.isBlank(borderTopWidthValue)) {
	finalCSS.add("border-width: " + borderTopWidthValue);
}
else {
	if (!_unitSet.contains(borderTopWidthValue) && !Validator.isBlank(borderTopWidthValue)) {
		finalCSS.add("border-top-width: " + borderTopWidthValue);
	}

	if (!_unitSet.contains(borderRightWidthValue) && !Validator.isBlank(borderRightWidthValue)) {
		finalCSS.add("border-right-width: " + borderRightWidthValue);
	}

	if (!_unitSet.contains(borderBottomWidthValue) && !Validator.isBlank(borderBottomWidthValue)) {
		finalCSS.add("border-bottom-width: " + borderBottomWidthValue);
	}

	if (!_unitSet.contains(borderLeftWidthValue) && !Validator.isBlank(borderLeftWidthValue)) {
		finalCSS.add("border-left-width: " + borderLeftWidthValue);
	}
}

if (ufaBorderStyle && !_unitSet.contains(borderTopWidthValue) && !Validator.isBlank(borderTopStyleValue)) {
	finalCSS.add("border-style: " + borderTopStyleValue);
}
else {
	if (Validator.isNotNull(borderTopStyleValue) && !Validator.isBlank(borderTopStyleValue)) {
		finalCSS.add("border-top-style: " + borderTopStyleValue);
	}

	if (Validator.isNotNull(borderRightStyleValue) && !Validator.isBlank(borderRightStyleValue)) {
		finalCSS.add("border-right-style: " + borderRightStyleValue);
	}

	if (Validator.isNotNull(borderBottomStyleValue) && !Validator.isBlank(borderBottomStyleValue)) {
		finalCSS.add("border-bottom-style: " + borderBottomStyleValue);
	}

	if (Validator.isNotNull(borderLeftStyleValue) && !Validator.isBlank(borderLeftStyleValue)) {
		finalCSS.add("border-left-style: " + borderLeftStyleValue);
	}
}

if (ufaBorderColor) {
	if (Validator.isNotNull(borderTopColorValue) && !Validator.isBlank(borderTopColorValue)) {
		finalCSS.add("border-color: " + borderTopColorValue);
	}
}
else {
	if (Validator.isNotNull(borderTopColorValue) && !Validator.isBlank(borderTopColorValue)) {
		finalCSS.add("border-top-color: " + borderTopColorValue);
	}

	if (Validator.isNotNull(borderRightColorValue) && !Validator.isBlank(borderRightColorValue)) {
		finalCSS.add("border-right-color: " + borderRightColorValue);
	}

	if (Validator.isNotNull(borderBottomColorValue) && !Validator.isBlank(borderBottomColorValue)) {
		finalCSS.add("border-bottom-color: " + borderBottomColorValue);
	}

	if (Validator.isNotNull(borderLeftColorValue) && !Validator.isBlank(borderLeftColorValue)) {
		finalCSS.add("border-left-color: " + borderLeftColorValue);
	}
}

// Spacing data

JSONObject spacingData = jsonObject.getJSONObject("spacingData");

JSONObject margin = spacingData.getJSONObject("margin");
JSONObject padding = spacingData.getJSONObject("padding");

boolean ufaMargin = margin.getBoolean(_SAME_FOR_ALL_KEY);
boolean ufaPadding = padding.getBoolean(_SAME_FOR_ALL_KEY);

// Margin

JSONObject marginTop = margin.getJSONObject(_TOP_KEY);
JSONObject marginRight = margin.getJSONObject(_RIGHT_KEY);
JSONObject marginBottom = margin.getJSONObject(_BOTTOM_KEY);
JSONObject marginLeft = margin.getJSONObject(_LEFT_KEY);

String marginTopValue = marginTop.getString(_VALUE_KEY) + marginTop.getString(_UNIT_KEY);
String marginRightValue = marginRight.getString(_VALUE_KEY) + marginRight.getString(_UNIT_KEY);
String marginBottomValue = marginBottom.getString(_VALUE_KEY) + marginBottom.getString(_UNIT_KEY);
String marginLeftValue = marginLeft.getString(_VALUE_KEY) + marginLeft.getString(_UNIT_KEY);

if (ufaMargin && !_unitSet.contains(marginTopValue) && !Validator.isBlank(marginTopValue)) {
	finalCSS.add("margin: " + marginTopValue);
}
else {
	if (!_unitSet.contains(marginTopValue) && !Validator.isBlank(marginTopValue)) {
		finalCSS.add("margin-top: " + marginTopValue);
	}

	if (!_unitSet.contains(marginRightValue) && !Validator.isBlank(marginRightValue)) {
		finalCSS.add("margin-right: " + marginRightValue);
	}

	if (!_unitSet.contains(marginBottomValue) && !Validator.isBlank(marginBottomValue)) {
		finalCSS.add("margin-bottom: " + marginBottomValue);
	}

	if (!_unitSet.contains(marginLeftValue) && !Validator.isBlank(marginLeftValue)) {
		finalCSS.add("margin-left: " + marginLeftValue);
	}
}

// Padding

JSONObject paddingTop = padding.getJSONObject(_TOP_KEY);
JSONObject paddingRight = padding.getJSONObject(_RIGHT_KEY);
JSONObject paddingBottom = padding.getJSONObject(_BOTTOM_KEY);
JSONObject paddingLeft = padding.getJSONObject(_LEFT_KEY);

String paddingTopValue = paddingTop.getString(_VALUE_KEY) + paddingTop.getString(_UNIT_KEY);
String paddingRightValue = paddingRight.getString(_VALUE_KEY) + paddingRight.getString(_UNIT_KEY);
String paddingBottomValue = paddingBottom.getString(_VALUE_KEY) + paddingBottom.getString(_UNIT_KEY);
String paddingLeftValue = paddingLeft.getString(_VALUE_KEY) + paddingLeft.getString(_UNIT_KEY);

if (ufaPadding && !_unitSet.contains(paddingTopValue) && !Validator.isBlank(paddingTopValue)) {
	finalCSS.add("padding: " + paddingTopValue);
}
else {
	if (!_unitSet.contains(paddingTopValue) && !Validator.isBlank(paddingTopValue)) {
		finalCSS.add("padding-top: " + paddingTopValue);
	}

	if (!_unitSet.contains(paddingRightValue) && !Validator.isBlank(paddingRightValue)) {
		finalCSS.add("padding-right: " + paddingRightValue);
	}

	if (!_unitSet.contains(paddingBottomValue) && !Validator.isBlank(paddingBottomValue)) {
		finalCSS.add("padding-bottom: " + paddingBottomValue);
	}

	if (!_unitSet.contains(paddingLeftValue) && !Validator.isBlank(paddingLeftValue)) {
		finalCSS.add("padding-left: " + paddingLeftValue);
	}
}

// Text data

JSONObject textData = jsonObject.getJSONObject("textData");

String color = textData.getString("color");
String fontFamily = textData.getString("fontFamily");
String fontSize = textData.getString("fontSize");
String fontStyle = textData.getString("fontStyle");
String fontWeight = textData.getString("fontWeight");
String letterSpacing = textData.getString("letterSpacing");
String lineHeight = textData.getString("lineHeight");
String textAlign = textData.getString("textAlign");
String textDecoration = textData.getString("textDecoration");
String wordSpacing = textData.getString("wordSpacing");

if (Validator.isNotNull(color) && !Validator.isBlank(color)) {
	finalCSS.add("color: " + color);
}

if (Validator.isNotNull(fontFamily) && !Validator.isBlank(fontFamily)) {
	finalCSS.add("font-family: '" + fontFamily + "'");
}

if (Validator.isNotNull(fontSize) && !Validator.isBlank(fontSize)) {
	finalCSS.add("font-size: " + fontSize);
}

if (Validator.isNotNull(fontStyle) && !Validator.isBlank(fontStyle)) {
	finalCSS.add("font-style: " + fontStyle);
}

if (Validator.isNotNull(fontWeight) && !Validator.isBlank(fontWeight)) {
	finalCSS.add("font-weight: " + fontWeight);
}

if (Validator.isNotNull(letterSpacing) && !Validator.isBlank(letterSpacing)) {
	finalCSS.add("letter-spacing: " + letterSpacing);
}

if (Validator.isNotNull(lineHeight) && !Validator.isBlank(lineHeight)) {
	finalCSS.add("line-height: " + lineHeight);
}

if (Validator.isNotNull(textAlign) && !Validator.isBlank(textAlign)) {
	finalCSS.add("text-align: " + textAlign);
}

if (Validator.isNotNull(textDecoration) && !Validator.isBlank(textDecoration)) {
	finalCSS.add("text-decoration: " + textDecoration);
}

if (Validator.isNotNull(wordSpacing) && !Validator.isBlank(wordSpacing)) {
	finalCSS.add("word-spacing: " + wordSpacing);
}

// Advanced styling

JSONObject advancedData = jsonObject.getJSONObject("advancedData");

String customCSS = advancedData.getString("customCSS");

// Generated CSS

out.print("#p_p_id_" + portlet.getPortletId() + "_ .portlet-content");

out.print(" {\n");

String[] finalCSSArray = (String[])finalCSS.toArray(new String[0]);

String finalCSSString = StringUtil.merge(finalCSSArray, ";\n");

out.print(_escapeCssBlock(finalCSSString));

out.print("\n}\n");

// Advanced CSS

if (Validator.isNotNull(customCSS)) {
	out.print(_escapeCssBlock(customCSS));
}
%>

<%!
private static final String _BOTTOM_KEY = "bottom";

private static final String _LEFT_KEY = "left";

private static final String _RIGHT_KEY = "right";

private static final String _SAME_FOR_ALL_KEY = "sameForAll";

private static final String _TOP_KEY = "top";

private static final String _UNIT_KEY = "unit";

private static final String _VALUE_KEY = "value";

private static final Set _unitSet = new HashSet();

static {
	_unitSet.add("px");
	_unitSet.add("em");
	_unitSet.add("%");
}
%>